{"version":3,"sources":["features/auth/authSlice.ts","app/rootReducer.ts","app/store.ts","index.tsx","features/auth/Auth.tsx","app/App.tsx"],"names":["initialState","authSlice","createSlice","name","reducers","getProfile","state","action","payload","clearProfile","actions","rootReducer","combineReducers","auth","store","configureStore","reducer","App","require","default","ReactDOM","render","document","getElementById","Auth","dispatch","useDispatch","useSelector","shallowEqual","imageUrl","email","isAuthenticated","Avatar","alt","src","clientId","API_KEYS","GOOGLE_AUTH","buttonText","onLogoutSuccess","onSuccess","response","profileObj","onFailure","e","console","error","cookiePolicy","isSignedIn"],"mappings":"iJAAA,+EAEMA,EAAoB,GAEpBC,EAAYC,YAAY,CAC5BC,KAAM,OACNH,eACAI,SAAU,CACRC,WADQ,SACGC,EAAOC,GAChB,OAAOA,EAAOC,SAEhBC,aAJQ,WAKN,OAAOT,M,EAK+BC,EAAUS,QAAvCL,E,EAAAA,WAAYI,E,EAAAA,aAEZR,MAAf,S,qSCTeU,EANKC,YAAgB,CAClCC,WCiBaC,MAjBDC,YAAe,CAC3BC,QAASL,I,OCCX,WAEE,IAAMM,EAAMC,EAAQ,IAAaC,QACjCC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAACG,EAAD,OAEFK,SAASC,eAAe,SAI5BF,I,kGCoCeG,MA/Cf,WACE,IAAMC,EAAWC,cADH,EAMVC,aAAY,SAACrB,GAAD,OAAgBA,EAAMO,OAAMe,KAH1CC,EAHY,EAGZA,SACAC,EAJY,EAIZA,MACA3B,EALY,EAKZA,KAGI4B,IAAoB5B,EAc1B,OACE,oCACG4B,GAAmB,kBAACC,EAAA,EAAD,CAAQC,IAAK9B,EAAM+B,IAAKL,IAC5C,6BAAMC,GACN,6BAAM3B,GACL4B,EACC,kBAAC,eAAD,CACEI,SAAUC,EAASC,YACnBC,WAAW,iCACXC,gBAbgB,WACtBd,EAAShB,kBAeL,kBAAC,cAAD,CACE0B,SAAUC,EAASC,YACnBC,WAAW,iCACXE,UA3BU,SAACC,GACjBhB,EAASpB,YAAWoC,EAASC,cA2BvBC,UAxBU,SAACC,GACjBC,QAAQC,MAAMF,IAwBRG,aAAa,qBACbC,YAAU,MC1CL/B,UAFH,kBAAM,kBAAC,EAAD,S","file":"static/js/main.bf0333cb.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst initialState: any = {};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    getProfile(state, action: PayloadAction<any>) {\n      return action.payload;\n    },\n    clearProfile() {\n      return initialState;\n    },\n  },\n});\n\nexport const { getProfile, clearProfile } = authSlice.actions;\n\nexport default authSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport auth from 'features/auth/authSlice';\n\nconst rootReducer = combineReducers({\n  auth,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\n// @ts-ignore\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  // @ts-ignore\n  module.hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './app/store';\nimport './index.css';\n\nfunction render() {\n  // eslint-disable-next-line global-require\n  const App = require('./app/App').default;\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n}\n\nrender();\n\n// @ts-ignore\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  // @ts-ignore\n  module.hot.accept('./app/App', render);\n}\n","import React from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport { getProfile, clearProfile } from 'features/auth/authSlice';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Avatar } from '@material-ui/core';\nimport API_KEYS from 'API_KEYS.json';\n\nfunction Auth() {\n  const dispatch = useDispatch();\n  const {\n    imageUrl,\n    email,\n    name,\n  } = useSelector((state: any) => state.auth, shallowEqual);\n\n  const isAuthenticated = !!name;\n\n  const onSuccess = (response: any) => {\n    dispatch(getProfile(response.profileObj));\n  };\n\n  const onFailure = (e: any) => {\n    console.error(e);\n  };\n\n  const onLogoutSuccess = () => {\n    dispatch(clearProfile());\n  };\n\n  return (\n    <>\n      {isAuthenticated && <Avatar alt={name} src={imageUrl} />}\n      <div>{email}</div>\n      <div>{name}</div>\n      {isAuthenticated ? (\n        <GoogleLogout\n          clientId={API_KEYS.GOOGLE_AUTH}\n          buttonText=\"Выйти\"\n          onLogoutSuccess={onLogoutSuccess}\n        />\n      ) : (\n        <GoogleLogin\n          clientId={API_KEYS.GOOGLE_AUTH}\n          buttonText=\"Войти\"\n          onSuccess={onSuccess}\n          onFailure={onFailure}\n          cookiePolicy=\"single_host_origin\"\n          isSignedIn\n        />\n      )}\n    </>\n  );\n}\n\nexport default Auth;\n","import React from 'react';\nimport Auth from 'features/auth/Auth';\n\nconst App = () => <Auth />;\n\nexport default App;\n"],"sourceRoot":""}