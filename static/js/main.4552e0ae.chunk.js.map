{"version":3,"sources":["features/visibilityFilter/visibilityFilterSlice.ts","features/todoList/TodoListItem.tsx","features/todoList/TodoList.tsx","features/todoList/AddTodo.tsx","features/visibilityFilter/FilterButton.tsx","features/visibilityFilter/Footer.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx","features/todoList/todoSlice.ts"],"names":["VisibilityFilter","initialState","ShowAll","visibilityFilterSlice","createSlice","name","reducers","setVisibilityFilter","state","action","payload","actions","TodoListItem","completed","text","onClick","style","textDecoration","TodoList","dispatch","useDispatch","todos","useSelector","filter","ShowCompleted","t","ShowActive","Error","getVisibleTodos","visibilityFilter","map","todo","key","id","toggleTodo","AddTodo","React","useState","setText","onSubmit","e","preventDefault","trim","addTodo","value","onChange","target","type","FilterButton","currentvisibilityFilter","disabled","Footer","App","rootReducer","combineReducers","store","configureStore","reducer","require","default","ReactDOM","render","document","getElementById","todoSlice","receiveTodos","receiveTodo","push","find","_todo","a","newTodo","Math","random","toString","substr"],"mappings":"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","file":"static/js/main.4552e0ae.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// eslint-disable-next-line no-shadow\nexport enum VisibilityFilter {\n    ShowAll = 'SHOW_ALL',\n    ShowCompleted = 'SHOW_COMPLETED',\n    ShowActive = 'SHOW_ACTIVE',\n}\n\nconst initialState = VisibilityFilter.ShowAll;\n\nconst visibilityFilterSlice = createSlice({\n  name: 'visibilityFilter',\n  initialState,\n  reducers: {\n    setVisibilityFilter(state, action: PayloadAction<VisibilityFilter>) {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setVisibilityFilter } = visibilityFilterSlice.actions;\n\nexport default visibilityFilterSlice.reducer;\n","import React from 'react';\n\ninterface TodoProps {\n    completed: boolean,\n    text: string,\n    onClick: () => any,\n}\n\nexport default function TodoListItem({ completed, text, onClick }: TodoProps) {\n  return (\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions\n    <li\n      onClick={onClick}\n      style={{\n        textDecoration: completed ? 'line-through' : 'none',\n      }}\n    >\n      {text}\n    </li>\n  );\n}\n","import React from 'react';\nimport { RootState } from 'app/rootReducer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { VisibilityFilter } from 'features/visibilityFilter/visibilityFilterSlice';\nimport { toggleTodo } from './todoSlice';\nimport TodoListItem from './TodoListItem';\nimport { Todo } from './types';\n\nconst getVisibleTodos = (todos: Todo[], filter: VisibilityFilter) => {\n  switch (filter) {\n    case VisibilityFilter.ShowAll:\n      return todos;\n    case VisibilityFilter.ShowCompleted:\n      return todos.filter((t) => t.completed);\n    case VisibilityFilter.ShowActive:\n      return todos.filter((t) => !t.completed);\n    default:\n      throw new Error(`Unknown filter: ${filter}`);\n  }\n};\n\n// eslint-disable-next-line no-undef\nexport default function TodoList(): JSX.Element {\n  const dispatch = useDispatch();\n\n  const todos = useSelector(\n    (state: RootState) => getVisibleTodos(state.todos, state.visibilityFilter),\n  );\n\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <TodoListItem key={todo.id} {...todo} onClick={() => dispatch(toggleTodo(todo))} />\n\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from './todoSlice';\n\n// eslint-disable-next-line no-undef\nexport default function AddTodo(): JSX.Element {\n  const dispatch = useDispatch();\n  const [text, setText] = React.useState('');\n\n  function handleChange(e: { target: HTMLInputElement; }) {\n    setText(e.target.value);\n  }\n\n  function handleSubmit(e: any) {\n    e.preventDefault();\n\n    if (!text.trim()) {\n      return;\n    }\n    dispatch(addTodo(text));\n\n    setText('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={text} onChange={handleChange} />\n      <button type=\"submit\">Add Todo</button>\n    </form>\n  );\n}\n","import React from 'react';\n\nimport { setVisibilityFilter, VisibilityFilter } from 'features/visibilityFilter/visibilityFilterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'app/rootReducer';\n\ninterface FilterButtonProps {\n    visibilityFilter: VisibilityFilter,\n    text: string,\n}\n\n// eslint-disable-next-line no-undef\nexport default function FilterButton({ visibilityFilter, text }: FilterButtonProps): JSX.Element {\n  const dispatch = useDispatch();\n\n  const currentvisibilityFilter = useSelector(\n    (state: RootState) => state.visibilityFilter,\n  );\n\n  return (\n    <button\n      disabled={currentvisibilityFilter === visibilityFilter}\n      onClick={() => dispatch(setVisibilityFilter(visibilityFilter))}\n      type=\"button\"\n    >\n      {text}\n    </button>\n  );\n}\n","import React from 'react';\nimport { VisibilityFilter } from 'features/visibilityFilter/visibilityFilterSlice';\nimport FilterButton from './FilterButton';\n\n// eslint-disable-next-line no-undef\nexport default function Footer(): JSX.Element {\n  return (\n    <div>\n      <span>Show: </span>\n      <FilterButton visibilityFilter={VisibilityFilter.ShowAll} text=\"All\" />\n      <FilterButton visibilityFilter={VisibilityFilter.ShowActive} text=\"Active\" />\n      <FilterButton visibilityFilter={VisibilityFilter.ShowCompleted} text=\"Completed\" />\n    </div>\n  );\n}\n","import React from 'react';\nimport TodoList from 'features/todoList/TodoList';\nimport AddTodo from 'features/todoList/AddTodo';\nimport Footer from 'features/visibilityFilter/Footer';\n\nexport default function App() {\n  return (\n    <div>\n      <AddTodo />\n      <TodoList />\n      <Footer />\n    </div>\n  );\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport todos from 'features/todoList/todoSlice';\nimport visibilityFilter from 'features/visibilityFilter/visibilityFilterSlice';\n\nconst rootReducer = combineReducers({\n  todos,\n  visibilityFilter,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\n// @ts-ignore\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  // @ts-ignore\n  module.hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './app/store';\nimport './index.css';\n\nfunction render() {\n  // eslint-disable-next-line global-require\n  const App = require('./app/App').default;\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n}\n\nrender();\n\n// @ts-ignore\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  // @ts-ignore\n  module.hot.accept('./app/App', render);\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { AppThunk, AppDispatch } from 'app/store';\nimport { Todo } from 'features/todoList/types';\n\nconst initialState: Todo[] = [];\n\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    receiveTodos(state, action: PayloadAction<Todo[]>) {\n      return action.payload;\n    },\n    receiveTodo(state, action: PayloadAction<Todo>) {\n      state.push(action.payload);\n    },\n    toggleTodo(state, action: PayloadAction<Todo>) {\n      const todo = state.find((_todo) => _todo.id === action.payload.id);\n\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n  },\n});\nexport const { toggleTodo } = todoSlice.actions;\n\nexport const addTodo = (\n  text: string,\n): AppThunk => async (dispatch: AppDispatch) => {\n  const newTodo: Todo = {\n    id: Math.random().toString(36).substr(2, 9),\n    completed: false,\n    text,\n  };\n\n  dispatch(todoSlice.actions.receiveTodo(newTodo));\n};\n\nexport default todoSlice.reducer;\n"],"sourceRoot":""}